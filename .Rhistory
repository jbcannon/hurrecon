load('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/geographic.RData')
load('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/radius_models.RData')
source('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/R/support-fxns.R')
source('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/R/load-parse-hurdat-data.R')
max_rad_km = 10
res_m = 1000
max_interp_dist_km = 1000
proj = '32616'
aoi = NULL;
mods=radius_models
devtools::install_github('jbcannon/hurrecon')
setwd('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list=ls()
)
devtools::document()
detach('package:hurrecon', unload=TRUE)
devtools::install_github('jbcannon/hurrecon')
library(hurrecon)
detach('package:hurrecon', unload=TRUE)
hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = hurrecon::load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
install.packages('tidyverse')
install.packages("tidyverse")
devtoolS::install_github('jbcannon/hurrecon')
install.packages('devtools')
devtoolS::install_github('jbcannon/hurrecon')
library(devtools)
devtoolS::install_github('jbcannon/hurrecon')
install_github('jbcannon/hurrecon')
load('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/geographic.RData')
load('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/radius_models.RData')
source('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/R/support-fxns.R')
source('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/R/load-parse-hurdat-data.R')
max_rad_km = 10
res_m = 1000
max_interp_dist_km = 1000
proj = '32616'
aoi = NULL;
mods=radius_models
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
install.packages('units')
install.packages("units")
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
install.packages('Rcpp')
install.packages("Rcpp")
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
plot(trk)
# check that track is valid
val = all(class(trk) == c('sf', 'tbl_df', 'tbl', 'data.frame'))
if(!val) stop('trk must be a valid sf object from load_hurdat_track')
val = all(c('track_id', 'record', 'time', 'lon', '34kt_se') %in% colnames(trk))
if(!val) stop('trk does not appear to contain valid columns. Load track with load_hurdat_track')
if(!'land' %in% ls()) {
cat('must run `data(\'geographic\')` to load land object')
data('geographic')
}
# Check if there are missing values in size prediction
needs_pred = apply(dplyr::select(sf::st_drop_geometry(trk), contains('34') | contains('50') | contains('64')), 1, function(x) any(x<0)) & trk$max_speed >= 34
if(any(needs_pred)) stop('Missing size data in some tracks, us gap fill size information containng value -999')
vars = grep('kt_', colnames(trk), value=TRUE)
for(v in vars) trk[dplyr::pull(trk, v) == -999,v] = 0
#Add movement columns
movement = get_Ha_Hv(trk)
trk = dplyr::bind_cols(trk, movement)
dens_fact = find_densification(trk, max_interp_dist_km);
track_densif = densify(trk, dens_fact, land)
track_densif_aoi = track_densif
track_densif_aoi = sp::st_intersect(track_densif, aoi)
track_densif_aoi = sf::st_intersect(track_densif, aoi)
track_densif_aoi = sf::st_intersection(track_densif, aoi)
sf::st_inerseaoi
aoi
st_crs(trk)
sf::st_crs(trk)
track_densif_aoi = sf::st_intersection(track_densif, sf::st_transform(aoi, sf::st_crs(trk)))
plot(track_densif_aoi)
length(track_densif_aoi)
hurrecon_out = hurrecon(track_densif_aoi, max_radius_km = max_rad_km, res_m = res_m)
#' @export
hurrecon = function(track_densif, res_m, max_radius_km){
ext = suppressWarnings(cumulative_extent(track_densif, res_m = res_m, max_radius_km = max_radius_km))
Vs_out = ext
Vs_out[] = 0
track_densif = subset(track_densif, max_speed >= 34)
if(nrow(track_densif) < 1) return(list(Vs=Vs_out, D=D_out)) else {
len = nrow(track_densif)
for(i in 1:len){
x = track_densif[i,]
if(x$`50kt_ne` == 0 & x$`50kt_se` == 0 & x$`50kt_sw` == 0 & x$`50kt_nw` == 0) next
# Left off here  3/28/2022
Vs_tmp = suppressWarnings(Vs(track_densif[i,], max_radius_km = max_radius_km, template=ext))
v = terra::extend(Vs_tmp$Vs, ext)
v[is.na(v)]= 0
ismax = v > Vs_out
Vs_out = (Vs_out * !ismax) + (v * ismax)
cat(i, ' of ', len, ' (', round(i/len*100,1), '% complete)\n', sep = '')
}
return(Vs_out)
}
}
track_densif_aoi
track_densif_aoi = track_densif_aoi[1:5,]
hurrecon_out = hurrecon(track_densif_aoi, max_radius_km = max_rad_km, res_m = res_m)
hurrecon_out
plot(hurrecon_out)
terra::plot(hurrecon_out)
# check that track is valid
val = all(class(trk) == c('sf', 'tbl_df', 'tbl', 'data.frame'))
if(!val) stop('trk must be a valid sf object from load_hurdat_track')
val = all(c('track_id', 'record', 'time', 'lon', '34kt_se') %in% colnames(trk))
if(!val) stop('trk does not appear to contain valid columns. Load track with load_hurdat_track')
if(!'land' %in% ls()) {
cat('must run `data(\'geographic\')` to load land object')
data('geographic')
}
# Check if there are missing values in size prediction
needs_pred = apply(dplyr::select(sf::st_drop_geometry(trk), contains('34') | contains('50') | contains('64')), 1, function(x) any(x<0)) & trk$max_speed >= 34
if(any(needs_pred)) stop('Missing size data in some tracks, us gap fill size information containng value -999')
vars = grep('kt_', colnames(trk), value=TRUE)
for(v in vars) trk[dplyr::pull(trk, v) == -999,v] = 0
#Add movement columns
movement = get_Ha_Hv(trk)
trk = dplyr::bind_cols(trk, movement)
dens_fact = find_densification(trk, max_interp_dist_km);
track_densif = densify(trk, dens_fact, land)
# check that track is valid
val = all(class(trk) == c('sf', 'tbl_df', 'tbl', 'data.frame'))
if(!val) stop('trk must be a valid sf object from load_hurdat_track')
val = all(c('track_id', 'record', 'time', 'lon', '34kt_se') %in% colnames(trk))
if(!val) stop('trk does not appear to contain valid columns. Load track with load_hurdat_track')
if(!'land' %in% ls()) {
cat('must run `data(\'geographic\')` to load land object')
data('geographic')
}
# Check if there are missing values in size prediction
needs_pred = apply(dplyr::select(sf::st_drop_geometry(trk), contains('34') | contains('50') | contains('64')), 1, function(x) any(x<0)) & trk$max_speed >= 34
if(any(needs_pred)) stop('Missing size data in some tracks, us gap fill size information containng value -999')
vars = grep('kt_', colnames(trk), value=TRUE)
for(v in vars) trk[dplyr::pull(trk, v) == -999,v] = 0
#Add movement columns
movement = get_Ha_Hv(trk)
trk = dplyr::bind_cols(trk, movement)
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
# check that track is valid
val = all(class(trk) == c('sf', 'tbl_df', 'tbl', 'data.frame'))
if(!val) stop('trk must be a valid sf object from load_hurdat_track')
val = all(c('track_id', 'record', 'time', 'lon', '34kt_se') %in% colnames(trk))
if(!val) stop('trk does not appear to contain valid columns. Load track with load_hurdat_track')
if(!'land' %in% ls()) {
cat('must run `data(\'geographic\')` to load land object')
data('geographic')
}
# Check if there are missing values in size prediction
needs_pred = apply(dplyr::select(sf::st_drop_geometry(trk), contains('34') | contains('50') | contains('64')), 1, function(x) any(x<0)) & trk$max_speed >= 34
if(any(needs_pred)) stop('Missing size data in some tracks, us gap fill size information containng value -999')
vars = grep('kt_', colnames(trk), value=TRUE)
for(v in vars) trk[dplyr::pull(trk, v) == -999,v] = 0
#Add movement columns
movement = get_Ha_Hv(trk)
trk = dplyr::bind_cols(trk, movement)
dens_fact = find_densification(trk, max_interp_dist_km);
track_densif = densify(trk, dens_fact, land)
track_densif_aoi = track_densif
hurrecon_out = hurrecon(track_densif_aoi, max_radius_km = max_rad_km, res_m = res_m)
terra::plot(hurrecon_out)
res(hurrecon_out)
plot(land)
plot(land_lines)
head(land_lines)
plot(subset(land_lines, name=='GA'))
plot(subset(land_lines, name=='GA')$geometry)
plot(land_lines, add=TRUE)
plot(hurrecon_out,add=TRUE)
terra::plot(hurrecon_out,add=TRUE)
max_rad_km = 500
res_m = 500
max_interp_dist_km = 500
proj = '32616'
aoi = NULL;
mods=radius_models
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
hurrecon_out = hurrecon_run(trk)
# Download recent data from HURDAT2 (NOAA)
path = 'hurdat_data.csv'
fetch_best_tracks_data(path)
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
hurrecon_out = hurrecon_run(trk)
#' is the spatial resolution of the linear interpolation between concurrent hurrecon observation.
#' When `max_interp_dist_km` = 1, an interpolated observation is placed every 1 km between two
#' observations further apart than 1 km. Values < 1 km are not recommend to avoid gaps between
#' wind fields
#' @param proj string: default projecgtion for analyses. Recommend keeping at UTM16 (epsg:32616)
#' @param land SpatialPolygons: This is spatial layer representing land. This is used to identify when the hurricane is on land to incorporate appropriate adjustment factors
#' @param aoi area of interest, track locations outside of aoi are ignored. This can be used
#' to limit results for a specific spatial region (county, state, country, etc.). Must be
#' in same projection as `trk`.
#' @export
hurrecon_run = function(trk, max_rad_km = 100, res_m = 500, max_interp_dist_km = 1, proj = '32616',aoi = NULL, mods=radius_models) {
# check that track is valid
val = all(class(trk) == c('sf', 'tbl_df', 'tbl', 'data.frame'))
if(!val) stop('trk must be a valid sf object from load_hurdat_track')
val = all(c('track_id', 'record', 'time', 'lon', '34kt_se') %in% colnames(trk))
if(!val) stop('trk does not appear to contain valid columns. Load track with load_hurdat_track')
if(!'land' %in% ls()) {
cat('must run `data(\'geographic\')` to load land object')
data('geographic')
}
# Check if there are missing values in size prediction
needs_pred = apply(dplyr::select(sf::st_drop_geometry(trk), contains('34') | contains('50') | contains('64')), 1, function(x) any(x<0)) & trk$max_speed >= 34
if(any(needs_pred)) stop('Missing size data in some tracks, us gap fill size information containng value -999')
vars = grep('kt_', colnames(trk), value=TRUE)
for(v in vars) trk[dplyr::pull(trk, v) == -999,v] = 0
#Add movement columns
movement = get_Ha_Hv(trk)
trk = dplyr::bind_cols(trk, movement)
dens_fact = find_densification(trk, max_interp_dist_km);
track_densif = densify(trk, dens_fact, land)
if(is.null(aoi)) {
track_densif_aoi = track_densif
} else {
track_densif_aoi = sf::st_intersection(track_densif, sf::st_transform(aoi, sf::st_crs(trk)))
}
hurrecon_out = hurrecon(track_densif_aoi, max_radius_km = max_rad_km, res_m = res_m)
return(hurrecon_out)
}
hurr_out = hurrecon_run(trk)
data('geographic')
data('geographic')
hurrecon_out = hurrecon_run(trk)
hurrecon_out = hurrecon_run(trk)
#hurrecon::fetch_best_tracks_data('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt')
trk = load_hurdat_track('C:/Users/jeffery.cannon/Documents/GitHub/hurrecon/data/hurdat2-1851-2020.txt','AL142018')
# check that track is valid
val = all(class(trk) == c('sf', 'tbl_df', 'tbl', 'data.frame'))
if(!val) stop('trk must be a valid sf object from load_hurdat_track')
val = all(c('track_id', 'record', 'time', 'lon', '34kt_se') %in% colnames(trk))
if(!val) stop('trk does not appear to contain valid columns. Load track with load_hurdat_track')
if(!'land' %in% ls()) {
data('geographic')
}
# Check if there are missing values in size prediction
needs_pred = apply(dplyr::select(sf::st_drop_geometry(trk), contains('34') | contains('50') | contains('64')), 1, function(x) any(x<0)) & trk$max_speed >= 34
if(any(needs_pred)) stop('Missing size data in some tracks, us gap fill size information containng value -999')
vars = grep('kt_', colnames(trk), value=TRUE)
for(v in vars) trk[dplyr::pull(trk, v) == -999,v] = 0
# Check if there are missing values in size prediction
needs_pred = apply(dplyr::select(sf::st_drop_geometry(trk), contains('34') | contains('50') | contains('64')), 1, function(x) any(x<0)) & trk$max_speed >= 34
if(any(needs_pred)) stop('Missing size data in some tracks, us gap fill size information containng value -999')
vars = grep('kt_', colnames(trk), value=TRUE)
for(v in vars) trk[dplyr::pull(trk, v) == -999,v] = 0
#Add movement columns
movement = get_Ha_Hv(trk)
trk = dplyr::bind_cols(trk, movement)
dens_fact = find_densification(trk, max_interp_dist_km);
track_densif = densify(trk, dens_fact, land)
track_densif_aoi = track_densif
hurrecon_out = hurrecon(track_densif_aoi, max_radius_km = max_rad_km, res_m = res_m)
